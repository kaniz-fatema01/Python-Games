import numpy as np

# Constants
SIZE = 3  # Size of the game board
PLAYER1_SYMBOL = "X"
PLAYER2_SYMBOL = "O"

def create_board(size):
    return np.full((size, size), " ")

def print_board(board):
    print("\n--- Board ---")
    for row in board:
        print("|".join(row))
        print("-" * (2 * SIZE - 1))

def is_valid_move(board, row, col):
    return row >= 0 and row < SIZE and col >= 0 and col < SIZE and board[row][col] == " "

def is_winner(board, symbol):
    # Check rows
    if any(all(cell == symbol for cell in row) for row in board):
        return True

    # Check columns
    if any(all(board[row][col] == symbol for row in range(SIZE)) for col in range(SIZE)):
        return True

    # Check diagonals
    if all(board[i][i] == symbol for i in range(SIZE)):
        return True
    if all(board[i][SIZE - i - 1] == symbol for i in range(SIZE)):
        return True

    return False

def play_dot_connect():
    board = create_board(SIZE)
    current_player = 1

    while True:
        print_board(board)
        print(f"Player {current_player}'s turn:")

        row = int(input("Enter the row (0-2): "))
        col = int(input("Enter the column (0-2): "))

        if not is_valid_move(board, row, col):
            print("Invalid move. Try again.")
            continue

        if current_player == 1:
            board[row][col] = PLAYER1_SYMBOL
            if is_winner(board, PLAYER1_SYMBOL):
                print_board(board)
                print("Player 1 wins!")
                break
            current_player = 2
        else:
            board[row][col] = PLAYER2_SYMBOL
            if is_winner(board, PLAYER2_SYMBOL):
                print_board(board)
                print("Player 2 wins!")
                break
            current_player = 1

        if np.count_nonzero(board == " ") == 0:
            print_board(board)
            print("It's a tie!")
            break

play_dot_connect()
